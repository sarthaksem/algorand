#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 0 1
    bytecblock "status" "borrower" 0x151f7c75 "loanAmount" "Pending"
    txn ApplicationID
    bnz main_after_if_else@2
    // smart_contracts/hello_world/contract.algo.ts:5
    // borrower = GlobalState<string>({ key: "borrower", initialValue: "" })
    bytec_1 // "borrower"
    pushbytes ""
    app_global_put
    // smart_contracts/hello_world/contract.algo.ts:9
    // key: "loanAmount",
    bytec_3 // "loanAmount"
    // smart_contracts/hello_world/contract.algo.ts:10
    // initialValue: Uint64(0),
    intc_0 // 0
    // smart_contracts/hello_world/contract.algo.ts:8-11
    // loanAmount = GlobalState<uint64>({
    //   key: "loanAmount",
    //   initialValue: Uint64(0),
    // })
    app_global_put
    // smart_contracts/hello_world/contract.algo.ts:14
    // status = GlobalState<string>({ key: "status", initialValue: "None" })
    bytec_0 // "status"
    pushbytes "None"
    app_global_put

main_after_if_else@2:
    // smart_contracts/hello_world/contract.algo.ts:3
    // export class LoanRecord extends Contract {
    txn NumAppArgs
    bz main_bare_routing@10
    pushbytess 0x37d4a52e 0x0e03bc0e 0xd564ef27 // method "createLoan(string,uint64)string", method "repayLoan()string", method "getLoan()string"
    txna ApplicationArgs 0
    match main_createLoan_route@5 main_repayLoan_route@6 main_getLoan_route@7

main_after_if_else@14:
    // smart_contracts/hello_world/contract.algo.ts:3
    // export class LoanRecord extends Contract {
    intc_0 // 0
    return

main_getLoan_route@7:
    // smart_contracts/hello_world/contract.algo.ts:36
    // getLoan(): string {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub getLoan
    dup
    len
    itob
    extract 6 2
    swap
    concat
    bytec_2 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_repayLoan_route@6:
    // smart_contracts/hello_world/contract.algo.ts:26
    // repayLoan(): string {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub repayLoan
    dup
    len
    itob
    extract 6 2
    swap
    concat
    bytec_2 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_createLoan_route@5:
    // smart_contracts/hello_world/contract.algo.ts:17
    // createLoan(borrowerName: string, amount: uint64): string {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/hello_world/contract.algo.ts:3
    // export class LoanRecord extends Contract {
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    btoi
    // smart_contracts/hello_world/contract.algo.ts:17
    // createLoan(borrowerName: string, amount: uint64): string {
    callsub createLoan
    dup
    len
    itob
    extract 6 2
    swap
    concat
    bytec_2 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_bare_routing@10:
    // smart_contracts/hello_world/contract.algo.ts:3
    // export class LoanRecord extends Contract {
    txn OnCompletion
    bnz main_after_if_else@14
    txn ApplicationID
    !
    assert // can only call when creating
    intc_1 // 1
    return


// smart_contracts/hello_world/contract.algo.ts::LoanRecord.createLoan(borrowerName: bytes, amount: uint64) -> bytes:
createLoan:
    // smart_contracts/hello_world/contract.algo.ts:17
    // createLoan(borrowerName: string, amount: uint64): string {
    proto 2 1
    // smart_contracts/hello_world/contract.algo.ts:5
    // borrower = GlobalState<string>({ key: "borrower", initialValue: "" })
    bytec_1 // "borrower"
    // smart_contracts/hello_world/contract.algo.ts:18
    // this.borrower.value = borrowerName
    frame_dig -2
    app_global_put
    // smart_contracts/hello_world/contract.algo.ts:9
    // key: "loanAmount",
    bytec_3 // "loanAmount"
    // smart_contracts/hello_world/contract.algo.ts:19
    // this.loanAmount.value = amount
    frame_dig -1
    app_global_put
    // smart_contracts/hello_world/contract.algo.ts:14
    // status = GlobalState<string>({ key: "status", initialValue: "None" })
    bytec_0 // "status"
    // smart_contracts/hello_world/contract.algo.ts:20
    // this.status.value = "Pending"
    bytec 4 // "Pending"
    app_global_put
    // smart_contracts/hello_world/contract.algo.ts:22
    // return "Loan created for " + borrowerName + " with amount (check client)"
    pushbytes "Loan created for "
    frame_dig -2
    concat
    pushbytes " with amount (check client)"
    concat
    retsub


// smart_contracts/hello_world/contract.algo.ts::LoanRecord.repayLoan() -> bytes:
repayLoan:
    // smart_contracts/hello_world/contract.algo.ts:14
    // status = GlobalState<string>({ key: "status", initialValue: "None" })
    intc_0 // 0
    bytec_0 // "status"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/hello_world/contract.algo.ts:27
    // if (this.status.value === "Pending") {
    bytec 4 // "Pending"
    ==
    bz repayLoan_else_body@2
    // smart_contracts/hello_world/contract.algo.ts:14
    // status = GlobalState<string>({ key: "status", initialValue: "None" })
    bytec_0 // "status"
    // smart_contracts/hello_world/contract.algo.ts:28
    // this.status.value = "Repaid"
    pushbytes "Repaid"
    app_global_put
    // smart_contracts/hello_world/contract.algo.ts:29
    // return "Loan repaid successfully!"
    pushbytes "Loan repaid successfully!"
    retsub

repayLoan_else_body@2:
    // smart_contracts/hello_world/contract.algo.ts:31
    // return "No active loan to repay."
    pushbytes "No active loan to repay."
    retsub


// smart_contracts/hello_world/contract.algo.ts::LoanRecord.getLoan() -> bytes:
getLoan:
    // smart_contracts/hello_world/contract.algo.ts:5
    // borrower = GlobalState<string>({ key: "borrower", initialValue: "" })
    intc_0 // 0
    bytec_1 // "borrower"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/hello_world/contract.algo.ts:38
    // "Borrower: " + this.borrower.value +
    pushbytes "Borrower: "
    swap
    concat
    // smart_contracts/hello_world/contract.algo.ts:39
    // " | Amount: (check client) " +
    pushbytes " | Amount: (check client) "
    // smart_contracts/hello_world/contract.algo.ts:38-39
    // "Borrower: " + this.borrower.value +
    // " | Amount: (check client) " +
    concat
    // smart_contracts/hello_world/contract.algo.ts:40
    // " | Status: " + this.status.value
    pushbytes " | Status: "
    // smart_contracts/hello_world/contract.algo.ts:38-40
    // "Borrower: " + this.borrower.value +
    // " | Amount: (check client) " +
    // " | Status: " + this.status.value
    concat
    // smart_contracts/hello_world/contract.algo.ts:14
    // status = GlobalState<string>({ key: "status", initialValue: "None" })
    intc_0 // 0
    bytec_0 // "status"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/hello_world/contract.algo.ts:38-40
    // "Borrower: " + this.borrower.value +
    // " | Amount: (check client) " +
    // " | Status: " + this.status.value
    concat
    // smart_contracts/hello_world/contract.algo.ts:37-41
    // return (
    //   "Borrower: " + this.borrower.value +
    //   " | Amount: (check client) " +
    //   " | Status: " + this.status.value
    // )
    retsub
